#!/usr/bin/env ruby
# To test this file you must have an eclipse and fop installed!
# export OSGi=/path/to/eclipse
# buildr osgi:clean:dependencies osgi:resolve:dependencies osgi:install:dependencies
# buildr clean package

require 'buildr4osgi'

Buildr::write "demo/src/main/java/Hello.java", "public class Hello {}"
Buildr::write "demo/readme.textile", IO.readlines('../readme.textile')
Buildr::write "nested/demo2/src/main/java/Hello.java", "public class Hello {}"
Buildr::write "nested/demo2/doc/readme.textile", IO.readlines('../readme.textile')
Buildr::write "nested/demo2/doc/second.textile", IO.readlines('../readme.textile')
desc "An example buildr project which creates a PDF file from an textile markup file"

repositories.remote << "http://repo2.maven.org/maven2"
FOP      = 'org.apache.xmlgraphics:fop:jar:1.0' 
# org.eclipse.mylyn.wikitext cannot be found in a Maven repository
# WIKITEXT = 'org.eclipse.mylyn.wikitext'

def checkPreconditions
  if  Dir.glob("#{ENV['OSGi']}/plugins").size == 0
    puts "Environment variable OSGi must point to a valid eclipse installation"
    exit 1
  end
  if !system('which fop')
    puts "fop must be installed"
    exit 1
  end
end

def pdfFromFo(dest, src)
  raise "File #{src} must exist " if !File.exists?(src)
  cmd = "fop #{src} #{dest}"
  res= system(cmd)
end

def foFromTextile(dest, src)
  raise "File #{src} must exist " if !File.exists?(src)
  t = dest
  Java.load # needed to load class path for apache logger
  Buildr.ant('wikitext_to_xslfo') do |wikitext|
      wikitext.taskdef :name=>'wikitext_to_xslfo',
      :classname=>'org.eclipse.mylyn.wikitext.core.util.anttask.MarkupToXslfoTask',
      :classpath=> Dir.glob("#{ENV['OSGi']}/plugins/org.eclipse.mylyn.wikitext.*core*jar").join(File::PATH_SEPARATOR) do
    end
    puts "And generateing #{dest} from #{src}"
    FileUtils.makedirs(File.dirname(dest))
    wikitext.wikitext_to_xslfo :targetdir=>File.dirname(dest),
	      :validate => 'false',
	      :markupLanguage => 'Textile' do
      wikitext.fileset(:dir => File.dirname(src), :includes => File.basename(src))
    end
  end
end

def genDoku
  Dir.glob(_('**/*.textile')).each {
    |src|
      dest = _("target/doc/#{File.basename(src, '.textile')}.pdf")
      foFile = dest.sub('.pdf','.fo')
      file foFile => src do 
	foFromTextile(foFile, src)
      end
      file dest => foFile do
	pdfFromFo(dest, foFile)
      end
      package(:zip).include(dest, :as => "doc/#{File.basename(dest)}")
  }
end

define('container') do
  project.group = "grp"
  project.version = '1.0.0'
  checkPreconditions
  
  define("demo", :version => "1.0.0") do
    genDoku
    compile
    package(:zip)

    check package(:zip), 'zip should contain a readme.pdf' do
      it.should contain('doc/readme.pdf')
    end 
    
    check package(:zip), 'zip should not contain a readme.fo' do
      it.should_not contain('readme.fo')
    end 
    
    check package(:zip), 'zip should not contain a readme.textile' do
      it.should_not contain('readme.textile')
    end 
    
  end

  define("demo2", :version => "2.0.0", :base_dir=>'nested/demo2') do
    genDoku
    compile
    package(:zip)
    check package(:zip), 'zip should contain a readme.pdf' do
      it.should contain('doc/readme.pdf')
    end 
    
    check package(:zip), 'zip should not contain a readme.fo' do
      it.should_not contain('readme.fo')
    end 
    
    check package(:zip), 'zip should not contain a readme.textile' do
      it.should_not contain('readme.textile')
    end 
    
  end
 
end
