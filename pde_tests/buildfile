#!/usr/bin/env ruby
# To test this file you must adapt the constant EclipseTarFile to your system!
# It will be expanded into an eclipse subdir.
# buildr clean package
# Run PDE test for an Eclipse plugin
# See the eclipse Bug 140503 - How to automate the running of Eclipse PDE Unit tests using ant
#     https://bugs.eclipse.org/bugs/show_bug.cgi?id=140503
# Documentation https://bugs.eclipse.org/bugs/attachment.cgi?id=109388
# Code comes from https://bugs.eclipse.org/bugs/attachment.cgi?id=143986
# and https://bugs.eclipse.org/bugs/attachment.cgi?id=156982
require 'buildr4osgi'

desc "An example buildr project which runs a PDF unit test for an Eclipse PDE project"
EclipseTarFile = "/opt/downloads/eclipse-rcp-indigo-SR1-linux-gtk-x86_64.tar.gz"
EclipsePath    = File.expand_path(Dir.pwd+'/eclipse')
repositories.remote << "http://repo2.maven.org/maven2"

def checkPreconditions
  if  Dir.glob(EclipseTarFile).size == 0
    puts "#{EclipseTarFile} must point to an eclipse tar file for your system!"
    exit 1
  end
  ENV['OSGi'] = EclipsePath
  FileUtils.rm_rf(EclipsePath, :verbose => false)
  puts "unpacking #{EclipseTarFile}"
  unzip(Dir.pwd => EclipseTarFile).extract
end

def runPDE_UnitTest(classNames)
  test.exclude '*' # Tell junit to ignore all JUnit-test, as it would interfere with the PDE test
  test.with compile.target
  shortName = name.to_s.sub(parent.to_s+':','')
  build.enhance do |tst|
    package(:plugin)
    pdeTestUtilsJar = "#{path_to(:target, :test)}/pde.test.utils.jar"
    FileUtils.makedirs(File.dirname(pdeTestUtilsJar))
    artifacts = []
    ['org.apache.ant:ant:jar:1.8.2',
		    'org.apache.ant:ant-junit:jar:1.8.2',
		    'junit:junit:jar:3.8.2',
		    'org.eclipse.jdt:junit:jar:3.3.0-v20070606-0010'].each { |x| artifacts << artifact(x) }  
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating pdeTestUtilsJar #{pdeTestUtilsJar}")
      x.javac(:srcdir => "pde.test.utils/src",
	      :classpath => artifacts.join(File::PATH_SEPARATOR),
	      :includeantruntime => false,
	    :destdir => File.dirname(pdeTestUtilsJar)
	    )
	      
      x.zip(:destfile => pdeTestUtilsJar,
	    :basedir  =>  File.dirname(pdeTestUtilsJar),
	    :includes => "**/*.class")
    end if !File.exists?(pdeTestUtilsJar)
    testMetaMf = "#{test.compile.target.to_s}/META-INF/MANIFEST.MF"
  Buildr.write testMetaMf, <<EOF
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: #{shortName}_test Fragment
Bundle-SymbolicName: #{shortName}_test
Bundle-Version: #{version}
Fragment-Host: #{shortName};bundle-version="#{version}"
Bundle-Localization: plugin
Require-Bundle: org.junit
Bundle-RequiredExecutionEnvironment: JavaSE-1.6
EOF
    testPluginJar = "#{compile.target.to_s}/#{shortName}_#{version}.jar"
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating plugin #{shortName}")
      x.zip(:destfile => testPluginJar,
            :basedir  => compile.target.to_s,
            :includes => "**/*.class")
      x.zip(:destfile => testPluginJar,
            :basedir  => _,
            :update   => true,
            :includes => "META-INF/MANIFEST.MF")
    end
    zipName = "#{test.compile.target.to_s}/#{shortName}-test_#{version}.jar"
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating for test fragment for #{shortName}")
      x.zip(:destfile => zipName,
            :basedir  => test.compile.target.to_s,
            :includes => "**/*.class,META-INF/MANIFEST.MF")
    end

    FileUtils.cp(pdeTestUtilsJar.to_s, "#{EclipsePath}/plugins", :verbose => true, :preserve => true)
    FileUtils.cp(testPluginJar, "#{EclipsePath}/plugins/", :verbose => true, :preserve => true)
    FileUtils.cp(zipName,  "#{EclipsePath}/plugins/", :verbose => true, :preserve => true)
    cmd  ="java -cp #{pdeTestUtilsJar} pde.test.utils.PDETestPortLocator"
    system(cmd)
    myTestPort = IO.readlines('pde_test_port.properties').to_s.split('=')[1]
    launcherPath =  Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.launcher_*.jar")
  # create classpath test.eclipse.dir
    listPath  = Dir.glob("#{EclipsePath}/plugins/org.eclipse.core.runtime_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.common_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.ui.workbench_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jface_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.swt_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.swt.gtk.linux.x86_64*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.junit_4*/**/junit.jar")

  # add classpath pde.test.listener.class.path
    listPath += Dir.glob("#{EclipsePath}/plugins/org.apache.ant_*/**/ant.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.apache.ant_*/**/ant-junit.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jdt.junit_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.debug.core_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.osgi_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jdt.junit.core_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.core.resources_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.preferences_*.jar")
    
    
#    listPath += Dir.glob("#{EclipsePath}/plugins/")
    output = Dir.pwd+'/reports'
    cmd = "java -cp #{pdeTestUtilsJar}:#{listPath.join(':')} pde.test.utils.PDETestResultsCollector #{shortName} #{myTestPort} &"
    res = system(cmd)
    puts "Started PDETestResultsCollector. Wait 1 second"; sleep(1)    
    arg = "-application org.eclipse.pde.junit.runtime.uitestapplication " +
			    "-data #{output} -dev bin -clean " +
			    "-port #{myTestPort} -testpluginname #{shortName} " +
			    "-classnames #{classNames}"
    cmd = "java -classpath #{EclipsePath}/plugins/org.eclipse.equinox.launcher_*.jar org.eclipse.equinox.launcher.Main "
    cmd += arg
    puts "Starting PDE test"
    res = system(cmd)
  end
end
      
layout = Layout.new
layout[:source, :main, :java] = 'src'
layout[:source, :main, :resources] = 'rsc'
layout[:source, :test, :java] = 'test'

define('container') do
  project.group = "grp"
  project.version = '1.0.0'
  checkPreconditions
  
  define 'PhoneBookExample', :version => "1.0.0", :layout => layout do
    compile { FileUtils.makedirs(_('target/root/resources')) }
    compile.with dependencies + project.dependencies
    package(:plugin).include _('plugin.xml')
    package.include _('icons/')
    check package(:plugin), 'plugin should contain icons/sample.gif' do
      it.should contain('icons/sample.gif')
    end  if false
    check package(:plugin), 'plugin should contain plugin.xml' do
      it.should contain('plugin.xml')
    end 
    runPDE_UnitTest('phonebookexample.dialogs.PhoneBookEntryEditorDialogTest')
  end

  check file('PhoneBookExample/target/test/classes/PhoneBookExample-test_1.0.0.jar'), 'should exist' do
    it.should exist
  end
  check file('PhoneBookExample/target/test/classes/PhoneBookExample-test_1.0.0.jar'), 'should contain a manifest' do
    it.should contain('META-INF/MANIFEST.MF')
  end
  check file('PhoneBookExample/target/test/classes/PhoneBookExample-test_1.0.0.jar'), 'should contain a the test class' do
    it.should contain('phonebookexample/dialogs/PhoneBookEntryEditorDialogTest$MyPhoneBookEntryEditorDialog.class')
  end
  check file('TEST-PhoneBookExample.xml'), 'should exist' do
    it.should exist
  end
  check file('TEST-PhoneBookExample.xml'), 'should match success' do
    File.read('TEST-PhoneBookExample.xml').should match '<testsuite errors="0" failures="0"'
  end
  check file('reports/TEST-PhoneBookExample.xml'), 'should exist' do
    it.should exist
  end if false
  check file('reports/html/index.html'), 'should exist' do
    it.should exist
  end if false
  
end
