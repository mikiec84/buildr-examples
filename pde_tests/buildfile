#!/usr/bin/env ruby
# To test this file you must:
# * adapt the constant EclipseTarFile to your system! It will be expanded into an eclipse subdir.
#
# rvm jruby do buildr osgi:clean:dependencies osgi:resolve:dependencies osgi:install:dependencies
# rvm jruby do buildr buildr clean package
#
# Tested January 2012, using
# * buildr 1.4.6 java and 
# * my patched version of buildr4osgi https://github.com/ngiger/buildr4osgi commit 0228da8fc9
# * Debian wheezy 64-bit
# * rvm 1.10.0
# * jruby 1.6.5 (ruby-1.8.7-p330) (2011-10-25 9dcd388) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_26) [linux-amd64-java]
#
# Run PDE test for an Eclipse plugin
# See the eclipse Bug 140503 - How to automate the running of Eclipse PDE Unit tests using ant
#     https://bugs.eclipse.org/bugs/show_bug.cgi?id=140503
# Documentation https://bugs.eclipse.org/bugs/attachment.cgi?id=109388
# Code comes from https://bugs.eclipse.org/bugs/attachment.cgi?id=143986
# and https://bugs.eclipse.org/bugs/attachment.cgi?id=156982

require 'buildr'

myDefault = "/opt/downloads/eclipse-rcp-indigo-SR1-linux-gtk-x86_64.tar.gz"
EclipseTarFile = ENV['EclipseTarFile'] ?  myDefault : myDefault

EclipsePath = File.expand_path('eclipse')
ENV['OSGi'] = EclipsePath

ANT_ARTIFACTS = [
  'org.apache.ant:ant:jar:1.8.2',
  'org.apache.ant:ant-junit:jar:1.8.2',
  'junit:junit:jar:3.8.2',
  'org.eclipse.jdt:junit:jar:3.3.0-v20070606-0010'
]

def addEclipse
  if  Dir.glob(EclipseTarFile).size == 0
    puts "#{EclipseTarFile} must point to an eclipse tar file for your system!"
    exit 1
  end
  return if defined?(@@firstRun) and File.directory?(EclipsePath)
  puts "unpacking #{EclipseTarFile}"
  unzip(Dir.pwd => EclipseTarFile).extract
  @@firstRun = true
end


addEclipse if ARGV.join(' ').index('osgi:resolve') and !File.directory?(EclipsePath)
require 'buildr4osgi'

desc "An example buildr project which runs a PDF unit test for an Eclipse PDE project"
repositories.remote << "http://repo2.maven.org/maven2"

def runPDE_UnitTest(classNames)
  pluginPath = [ EclipsePath, 'plugins'].join(File::SEPARATOR)
  test.exclude '*' # Tell junit to ignore all JUnit-test, as it would interfere with the PDE test
  test.with compile.target
  test.compile.with ANT_ARTIFACTS
  shortName = name.to_s.sub(parent.to_s+':','')
  test.enhance do |tst|
    package(:plugin)
    pdeTestUtilsDir = [path_to(:target,:test),''].join(File::SEPARATOR)
    pdeTestUtilsJar = [pdeTestUtilsDir,'pde.test.utils.jar'].join(File::SEPARATOR)
    FileUtils.makedirs(pdeTestUtilsDir)
    artifacts = []
    ANT_ARTIFACTS.each { |x| artifacts << artifact(x) }
                         
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating pdeTestUtilsJar #{pdeTestUtilsJar}")
      x.javac(:srcdir => "pde.test.utils/src",
	      :classpath => artifacts.join(File::PATH_SEPARATOR),
	      :includeantruntime => false,
	      :destdir => pdeTestUtilsDir
	    )

      x.zip(:destfile => pdeTestUtilsJar,
	    :basedir  => pdeTestUtilsDir,
	    :includes => '**/*.class')
    end if !File.exists?(pdeTestUtilsJar)
    raise "Could not generate #{pdeTestUtilsJar}" if !File.exists?(pdeTestUtilsJar)

    testClassesDir = path_to(:target,:test,:classes)
    testMetaMf = [testClassesDir,'META-INF','MANIFEST.MF'].join(File::SEPARATOR)
    if !File.exists?(testMetaMf)
  Buildr.write testMetaMf, <<EOF
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: #{shortName}_test Fragment
Bundle-SymbolicName: #{shortName}_test
Bundle-Version: #{version}
Fragment-Host: #{shortName};bundle-version="#{version}"
Bundle-Localization: plugin
Require-Bundle: org.junit
Bundle-RequiredExecutionEnvironment: JavaSE-1.6
EOF
    end
    testPluginJar = ["#{compile.target.to_s}","#{shortName}_#{version}.jar"].join(File::SEPARATOR)
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating plugin #{shortName} #{testPluginJar}")
      x.zip(:destfile => testPluginJar,
            :basedir  => compile.target.to_s,
            :includes => "**/*.class")
      x.zip(:destfile => testPluginJar,
            :basedir  => _,
            :update   => true,
            :includes => "META-INF/MANIFEST.MF")
    end
    raise "Could not generate #{testPluginJar}" if !File.exists?(testPluginJar)
    zipName = [testClassesDir,"#{shortName}-test_#{version}.jar"].join(File::SEPARATOR)
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating test fragment for #{shortName} #{zipName}")
      x.zip(:destfile => zipName,
            :basedir  => File.dirname(zipName),
            :includes => "**/*.class,META-INF/MANIFEST.MF")
    end
    raise "Could not generate #{zipName}" if !File.exists?(zipName)

    # I know it take time (about 20" on my laptop) to remove and reinstall an RCP eclipse
    # Running this test a second time, failed if the eclipse installation is not in a virgin state
    # Send me an email if you know a faster workaround. Thanks!
    #FileUtils.rm_rf(EclipsePath, :verbose => true)
    addEclipse if !File.directory?(EclipsePath)
    FileUtils.cp(pdeTestUtilsJar, pluginPath, :verbose => true, :preserve => true)
    FileUtils.cp(testPluginJar, pluginPath, :verbose => true, :preserve => true)
    FileUtils.cp(zipName,  pluginPath, :verbose => true, :preserve => true)
    Java::Commands.java('pde.test.utils.PDETestPortLocator', {:classpath => pdeTestUtilsJar} )
    raise "Could not generate pde_test_port.properties" if !File.exists?('pde_test_port.properties')
    myTestPort = IO.readlines('pde_test_port.properties').to_s.split('=')[1]
    launcherPath =  Dir.glob([pluginPath,'org.eclipse.equinox.launcher_*.jar'].join(File::SEPARATOR))[0]
  # create classpath test.eclipse.dir
    
    listPath = []
    listPath << pdeTestUtilsJar
    listPath << Dir.glob([pluginPath, 'org.eclipse.core.runtime_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.equinox.common_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.ui.workbench_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.jface_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.swt_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.swt.gtk.linux.x86_64*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.junit_4*/**/junit.jar'].join(File::SEPARATOR))

  # add classpath pde.test.listener.class.path
    listPath << Dir.glob([pluginPath, 'org.apache.ant_*/**/ant.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.apache.ant_*/**/ant-junit.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.jdt.junit_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.debug.core_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.osgi_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.jdt.junit.core_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.core.resources_*.jar'].join(File::SEPARATOR))
    listPath << Dir.glob([pluginPath, 'org.eclipse.equinox.preferences_*.jar'].join(File::SEPARATOR))
    output =[ Dir.pwd, 'reports'].join(File::SEPARATOR)
    Thread.new do
      puts "Starting PDETestResultsCollector"
      Java::Commands.java('pde.test.utils.PDETestResultsCollector', shortName, myTestPort, {:classpath => listPath} )
      puts "PDETestResultsCollector finished"
    end
    
    puts "Started PDETestResultsCollector. Wait 1 second"; sleep(1)    
    puts "Starting PDE test"
    Java::Commands.java('org.eclipse.equinox.launcher.Main', 
			'-application',    'org.eclipse.pde.junit.runtime.uitestapplication',
			'-data',           output,
			'-dev',            'bin',
			'-clean',
			'-port',           myTestPort,
			'-testpluginname', shortName,
			'-classnames',     classNames,
			{:classpath => launcherPath } 
			)
  end
end
      
layout = Layout.new
layout[:source, :main, :java] = 'src'
layout[:source, :main, :resources] = 'rsc'
layout[:source, :test, :java] = 'test'

define('container') do
  project.group = "grp"
  project.version = '1.0.0'
  clean.enhance     do FileUtils.rm_rf(EclipsePath, :verbose => false) end
  resources.enhance do addEclipse if !File.directory?(EclipsePath) end
  
  define 'PhoneBookExample', :version => "1.0.0", :layout => layout do
    testPath = ['..', 'PhoneBookExample-test','test'].join(File::SEPARATOR)
    if File.directory?(_(testPath))
      puts "Patching Layout for PhoneBookExample-test"
      layout[:source, :test, :java] = testPath
      layout[:source, :test] = testPath
      layout[:target, :test] = ['..', 'PhoneBookExample-test', 'target', 'test'].join(File::SEPARATOR)
    else
      puts "Nothing to patch for #{_(testPath)}"
    end
    compile { FileUtils.makedirs(_(['target','root','resources'].join(File::SEPARATOR))) }
    compile.with dependencies + project.dependencies
    package(:plugin).include _('plugin.xml')
    package.include _('icons')
    check package(:plugin), 'plugin should contain icons/sample.gif' do
      it.should contain(['icons','sample.gif'].join(File::SEPARATOR))
    end  if false
    check package(:plugin), 'plugin should contain plugin.xml' do
      it.should contain('plugin.xml')
    end 
    runPDE_UnitTest('phonebookexample.dialogs.PhoneBookEntryEditorDialogTest')
  end

  check file(['PhoneBookExample-test','target','test','classes','PhoneBookExample-test_1.0.0.jar'].join(File::SEPARATOR)), 'should exist' do
    it.should exist
  end
  check file(['PhoneBookExample-test','target','test','classes','PhoneBookExample-test_1.0.0.jar'].join(File::SEPARATOR)), 'should contain a manifest' do
    it.should contain(['META-INF','MANIFEST.MF'].join(File::SEPARATOR))
  end
  check file(['PhoneBookExample-test','target','test','classes','PhoneBookExample-test_1.0.0.jar'].join(File::SEPARATOR)), 'should contain the test class' do
    it.should contain('phonebookexample/dialogs/PhoneBookEntryEditorDialogTest$MyPhoneBookEntryEditorDialog.class')
  end
  check file('TEST-PhoneBookExample.xml'), 'should exist' do
    it.should exist
  end
  check file('TEST-PhoneBookExample.xml'), 'should match success' do
    File.read('TEST-PhoneBookExample.xml').should match '<testsuite errors="0" failures="0"'
  end
  check file(['reports','TEST-PhoneBookExample.xml'].join(File::SEPARATOR)), 'should exist' do
    it.should exist
  end if false
  check file(['reports','html','index.html'].join(File::SEPARATOR)), 'should exist' do
    it.should exist
  end if false
  
end
