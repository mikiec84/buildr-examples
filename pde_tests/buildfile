#!/usr/bin/env ruby
# To test this file you must adapt the constant EclipseTarFile to your system!
# It will be expanded into an eclipse subdir.
# buildr clean package
# Run PDE test for an Eclipse plugin
# See the eclipse Bug 140503 - How to automate the running of Eclipse PDE Unit tests using ant
#     https://bugs.eclipse.org/bugs/show_bug.cgi?id=140503
# Documentation https://bugs.eclipse.org/bugs/attachment.cgi?id=109388
# Code comes from https://bugs.eclipse.org/bugs/attachment.cgi?id=143986
# and https://bugs.eclipse.org/bugs/attachment.cgi?id=156982
require 'buildr4osgi'

desc "An example buildr project which runs a PDF unit test for an Eclipse PDE project"
EclipseTarFile = "/opt/downloads/eclipse-rcp-indigo-SR1-linux-gtk-x86_64.tar.gz"
EclipsePath    = File.expand_path(Dir.pwd+'/eclipse')
repositories.remote << "http://repo2.maven.org/maven2"

def checkPreconditions
  if  Dir.glob(EclipseTarFile).size == 0
    puts "#{EclipseTarFile} must point to an eclipse tar file for your system!"
    exit 1
  end
  ENV['OSGi'] = EclipsePath
  FileUtils.rm_rf(EclipsePath, :verbose => false)
  puts "unpacking #{EclipseTarFile}"; sleep(0.01)
  system("tar -xf #{EclipseTarFile}")
end

def runPDE_UnitTest(testPlugin = 'PhoneBookExample',
                    classNames = 'phonebookexample.dialogs.PhoneBookEntryEditorDialogTest')
  test.with project('pde.test.utils').package(:jar)
  test.with project(testPlugin).package(:plugin)
  test.with project('PhoneBookExample-test').package(:plugin)
  build.enhance do |tst|
    pathToPDETests = project('PhoneBookExample-test')
    FileUtils.cp_r(pathToPDETests._('META-INF'), pathToPDETests._('target/test/classes'), :verbose => true, :preserve => true)
    zipName = "PhoneBookExample-test_1.0.0.jar"
    Buildr.ant('create_eclipse_plugin') do |x|
      x.echo(:message => "Generating zip ")
      x.zip(:destfile => zipName,
            :basedir  => pathToPDETests._('target/test/classes'),
            :includes => "**/*.class,META-INF/MANIFEST.MF")
      x.echo(:message => "zip done")
    end
    fullName = project(testPlugin).package(:plugin).to_s
    shortName = File.basename(fullName.sub('container-','')).sub('-','_')
    testFull  = project('PhoneBookExample-test').package(:plugin).to_s
    testShort =  File.basename(testFull).sub('-test-','-test_')
    FileUtils.cp(project('pde.test.utils').package(:jar).to_s, "#{EclipsePath}/plugins", :verbose => true, :preserve => true)
    FileUtils.cp(fullName, "#{EclipsePath}/plugins/#{shortName}", :verbose => true, :preserve => true)
    FileUtils.cp(zipName,  "#{EclipsePath}/plugins/", :verbose => true, :preserve => true)
    cmd  ="java -cp #{project('pde.test.utils').package(:jar)} pde.test.utils.PDETestPortLocator"
    system(cmd)
    myTestPort = IO.readlines('pde_test_port.properties').to_s.split('=')[1]
    launcherPath =  Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.launcher_*.jar")
  # create classpath test.eclipse.dir
    listPath  = Dir.glob("#{EclipsePath}/plugins/org.eclipse.core.runtime_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.common_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.ui.workbench_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jface_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.swt_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.swt.gtk.linux.x86_64*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.junit_4*/**/junit.jar")

  # add classpath pde.test.listener.class.path
    listPath += Dir.glob("#{EclipsePath}/plugins/org.apache.ant_*/**/ant.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.apache.ant_*/**/ant-junit.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jdt.junit_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.debug.core_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.osgi_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.jdt.junit.core_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.core.resources_*.jar")
    listPath += Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.preferences_*.jar")
    
    
#    listPath += Dir.glob("#{EclipsePath}/plugins/")
    output = Dir.pwd+'/reports'
    pdeTestUtilsJar = Dir.glob("#{EclipsePath}/plugins/*pde.test.utils*.jar")[0]
    cmd = "java -cp #{pdeTestUtilsJar}:#{listPath.join(':')} pde.test.utils.PDETestResultsCollector #{testPlugin} #{myTestPort} &"
    puts cmd
    res = system(cmd)
    puts "Started PDETestResultsCollector. Wait 1 second"; sleep(1)    
    arg = "-application org.eclipse.pde.junit.runtime.uitestapplication " +
			    "-data #{output} -dev bin -clean " +
			    "-port #{myTestPort} -testpluginname PhoneBookExample " +
			    "-classnames #{classNames}"
      launcher = Dir.glob("#{EclipsePath}/plugins/org.eclipse.equinox.launcher_*.jar")[0]
      pdeTestClassPath = ["#{EclipsePath}/plugins/org.eclipse.equinox.launcher_*.jar",
                          project('pde.test.utils').package(:jar),
                          project('pde.test.utils').compile.dependencies.join(File::PATH_SEPARATOR),
                          project('PhoneBookExample').package(:jar),
                          compile.dependencies.join(File::PATH_SEPARATOR),
                          test.dependencies.join(File::PATH_SEPARATOR),
                          self.package(:jar),
                          ].join(File::PATH_SEPARATOR)
    cmd = "java -classpath #{launcher} org.eclipse.equinox.launcher.Main "
    cmd += arg
    puts "Starting PDE test"
    puts cmd
    res = system(cmd)
  end
end
      
layout = Layout.new
layout[:source, :main, :java] = 'src'
layout[:source, :main, :resources] = 'rsc'
layout[:source, :test, :java] = 'test'

define('container') do
  project.group = "grp"
  project.version = '1.0.0'
  checkPreconditions
  
  define 'pde.test.utils', :layout => layout  do
    compile.with(['org.apache.ant:ant:jar:1.8.2',
                  'org.apache.ant:ant-junit:jar:1.8.2',
                  'junit:junit:jar:3.8.2',
                  'org.eclipse.jdt:junit:jar:3.3.0-v20070606-0010'])
    package(:jar)
  end
  
  define 'PhoneBookExample', :version => "1.0.0", :layout => layout do
    compile { FileUtils.makedirs(_('target/root/resources')) }
    compile.with dependencies + project.dependencies
    test.exclude 'phonebookexample.dialogs.PhoneBookEntryEditorDialogTest' # Tell junit to ignore it
    test.exclude '*' # Tell junit to ignore it
    package(:plugin).include _('plugin.xml')
    package.include _('icons/')
    check package(:plugin), 'plugin should contain icons/sample.gif' do
      it.should contain('icons/sample.gif')
    end  if false
    check package(:plugin), 'plugin should contain plugin.xml' do
      it.should contain('plugin.xml')
    end 

  end
  
  define 'PhoneBookExample-test', :layout => layout do
    compile { FileUtils.makedirs(_('target/root/resources')) }
    compile.with project('PhoneBookExample').dependencies  # as PhoneBookExample-test is a fragment of PhoneBookExample
    test.exclude '*' # Tell junit to ignore it
    package(:plugin)
    compile.with project('PhoneBookExample').package(:plugin)
  end
  runPDE_UnitTest
  check file('PhoneBookExample-test_1.0.0.jar'), 'should exist' do
    it.should exist
  end
  check file('PhoneBookExample-test_1.0.0.jar'), 'should contain a manifest' do
    it.should contain('META-INF/MANIFEST.MF')
  end
  check file('PhoneBookExample-test_1.0.0.jar'), 'should contain a the test class' do
    it.should contain('phonebookexample/dialogs/PhoneBookEntryEditorDialogTest$MyPhoneBookEntryEditorDialog.class')
  end
  check file('TEST-PhoneBookExample.xml'), 'should exist' do
    it.should exist
  end
  check file('TEST-PhoneBookExample.xml'), 'should match success' do
    File.read('TEST-PhoneBookExample.xml').should match '<testsuite errors="0" failures="0"'
  end
  check file('reports/TEST-PhoneBookExample.xml'), 'should exist' do
    it.should exist
  end if false
  check file('reports/html/index.html'), 'should exist' do
    it.should exist
  end if false
  
end
